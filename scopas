#!/bin/bash
#
# MIT License
# 
# Copyright (c) 2019 Matt Fleming
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# 

BUILDER_LIVE=false

function log() {
	echo $* | ts "[%b %d %H:%M:%S]"
}

function red() {
	echo -e "\e[31m$*\e[39m" |  ts "[%b %d %H:%M:%S]"
}

function green() {
	echo -e "\e[32m$*\e[39m" |  ts "[%b %d %H:%M:%S]"
}

function yellow() {
	echo -e "\e[33m$*\e[39m" |  ts "[%b %d %H:%M:%S]"
}

function fetch_logs() {
	log Fetching results and monitoring logs
	scp $FLAGS root@$BUILDER_IP:/tmp/scopas-{install,git,build,vmstat,mpstat,iostat}.log . &>/dev/null
}

function delete_builder() {
	log Deleting builder $BUILDER_ID
	curl -s -H "Authorization: Bearer $API_TOKEN" \
	    -X DELETE \
	    https://api.linode.com/v4/linode/instances/$BUILDER_ID 2>&1 >/dev/null
}

function die() {
	red "Error: $*" >&2

	if [ $BUILDER_LIVE = true ]; then
		fetch_logs
		delete_builder
		red "Check the logs to diagnose any errors" >&2
	fi

	exit 1
}


#
# 1. Read configuration
#
#  1.1 Builder
#    1.1.1 Which cloud provider?
#    1.1.2 API token
#    1.1.3 Instance type
#    1.1.4 Image
#    1.1.5 Region
#    1.1.6 Name
#    1.1.7 SSH key
#
#  1.2 Kernel (TODO)
#    1.2.1 Architectures
#    1.2.2 Configs
#

[ -e ~/.scopas ] && log "Using configuration file ~/.scopas"

function get_config() {
	echo $(grep "$*" ~/.scopas | awk -F= '{print $2}')
}

API_TOKEN=$(get_config API_TOKEN)
INSTANCE_TYPE=$(get_config INSTANCE_TYPE)
INSTANCE_IMAGE=$(get_config INSTANCE_IMAGE)
INSTANCE_NAME=$(get_config INSTANCE_NAME)
INSTANCE_REGION=$(get_config INSTANCE_REGION)

BUILDER_NAME=$(get_config BUILDER_NAME)
SSH_KEY_PATH=$(get_config SSH_KEY_PATH)
SSH_KEY=$(cat ${SSH_KEY_PATH})

yellow "(1/6) Deploying Linode instance"

#
# 2. Create builder
#
#
# 2.1. See if we can use golden image to reduce deploy time
#

OUTPUT=$(curl -s -H "Authorization: Bearer $API_TOKEN" \
    https://api.linode.com/v4/images/)

PYSCRIPT="
import sys
import json

data = json.load(sys.stdin)['data']
for x in data:
    if x['label'] == 'scopas_gold_master':
        print(x['id'])
"
IMAGE_ID=$(echo $OUTPUT | python -c "$PYSCRIPT")

if [ "$IMAGE_ID" = "" ]; then
	log No golden builder image found. Creating from scratch
	CREATE_IMAGE=true
	IMAGE_ID=$INSTANCE_IMAGE
fi

OUTPUT=$(curl -s -H "Content-Type: application/json" \
    -H "Authorization: Bearer $API_TOKEN" \
    -X POST -d '{
      "image": '\"$IMAGE_ID\"',
      "root_pass": "c001P455w0rd",
      "authorized_keys": [
        '\""$SSH_KEY"\"'
      ],
      "booted": true,
      "label": "builder",
      "type": '\"$INSTANCE_TYPE\"',
      "region": "eu-west",
      "group": "Linode-Group"
    }' \
    https://api.linode.com/v4/linode/instances)

BUILDER_ID=$(echo $OUTPUT | python -c "import sys, json; print(json.load(sys.stdin))['id']")
BUILDER_IP=$(echo $OUTPUT | python -c "import sys, json; print(json.load(sys.stdin))['ipv4'][0]")

log "Found builder (ID: $BUILDER_ID) @ $BUILDER_IP"

BUILDER_STATUS=$(curl -s -H "Authorization: Bearer $API_TOKEN" \
    https://api.linode.com/v4/linode/instances/$BUILDER_ID | \
    python -c "import sys, json; print(json.load(sys.stdin))['status']")

log Provisioning builder
BUILDER_STATUS=provisioning
while [ "$BUILDER_STATUS" = "provisioning" ]; do
	BUILDER_STATUS=$(curl -s -H "Authorization: Bearer $API_TOKEN" \
	    https://api.linode.com/v4/linode/instances/$BUILDER_ID | \
	    python -c "import sys, json; print(json.load(sys.stdin))['status']")
	sleep 2
done

log Booting builder
BUILDER_STATUS=booting
while [ "$BUILDER_STATUS" = "booting" ]; do
	BUILDER_STATUS=$(curl -s -H "Authorization: Bearer $API_TOKEN" \
	    https://api.linode.com/v4/linode/instances/$BUILDER_ID | \
	    python -c "import sys, json; print(json.load(sys.stdin))['status']")
	sleep 2
done

green "Builder is live"
BUILDER_LIVE=true

#
# 3. Configure builder
#
# Install necessary packages to build a kernel using a OS-neutral
# solution like PackageKit
#
FLAGS='-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o ConnectTimeout=1 -o LogLevel=QUIET'
RSH="ssh $FLAGS -i $SSH_KEY_PATH root@$BUILDER_IP"

log Waiting for SSH server

$RSH uname -r &> /dev/null
while [ $? -ne 0 ]; do
	$RSH uname -r &> /dev/null
done

log Cleaning old logs
$RSH "rm -f /tmp/scopas-*.log"

function rcmd_install() {
	$RSH "( $* ) &>> /tmp/scopas-install.log"
	[ $? -eq 0 ] || die "Failed to install packages"
}

yellow "(2/6) Configuring Linode instance"

log Bootstrapping package manager
rcmd_install "zypper refresh && zypper -n install -y PackageKit"

log Installing packages
rcmd_install "pkcon -y install gcc git make flex bison patch libelf-devel libopenssl-devel bc sysstat"

log Monitoring builder

$RSH "vmstat 1 &> /tmp/scopas-vmstat.log &"
$RSH "mpstat -P ALL 1 &> /tmp/scopas-mpstat.log &"
$RSH "iostat -xz 1 &> /tmp/scopas-iostat.log &"

#
# 4. Remote git clone into shm
#

if [ ! -d .git ] || [ ! -e ./Kbuild ]; then
	die "Not running inside git repository?"
fi

LOCAL_BRANCH=`git rev-parse --abbrev-ref HEAD`
TRACKING_REMOTE=`git config branch.$LOCAL_BRANCH.remote`
REMOTE_URL=`git config remote.$TRACKING_REMOTE.url`
LOCAL_REF=`git merge-base @{u} HEAD`

function rcmd_git() {
	$RSH "( $* ) &>> /tmp/scopas-git.log"
	[ $? -eq 0 ] || die "Failed to clone git repository"
}

yellow "(3/6) Cloning git repository and setting HEAD @ $LOCAL_REF"

rcmd_git "mkdir /dev/shm/build && cd /dev/shm/build && git clone $REMOTE_URL kernel && cd /dev/shm/build/kernel && git reset --hard $LOCAL_REF"

#
# 5. Upload delta
#

yellow "(4/6) Patching kernel source"

# Check that the diff is non-empty
[ $(git diff $LOCAL_REF..HEAD | wc -l) -gt 0 ] && {
	log Creating kernel patch
	PATCH_FILE=$(mktemp).patch
	git diff @{u}..HEAD > ${PATCH_FILE}

	log Uploading kernel patch ${PATCH_FILE}
	scp $FLAGS ${PATCH_FILE} root@$BUILDER_IP:/dev/shm/build/kernel/

	rcmd_git "cd /dev/shm/build/kernel && patch -p1 < $(basename ${PATCH_FILE})"
}

#
# 6. Remote build
#
function rcmd_build() {
	$RSH "( $* ) &>> /tmp/scopas-build.log"
	[ $? -eq 0 ] || die "Failed to build kernel"
}

yellow "(5/6) Building kernel"

rcmd_build "cd /dev/shm/build/kernel && make defconfig && make -j\`nproc\` all"

green Successfully built kernel

#
# 7. Fetch results log
#

fetch_logs

#
# 8. Delete builder
#

delete_builder
BUILDER_LIVE=false
yellow "(6/6) Finished"
